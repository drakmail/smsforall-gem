#!/usr/bin/env ruby

require 'smsforall'
require 'optparse'

# Parameters parsing
options = {}
 
optparse = OptionParser.new do|opts|
  opts.banner = "Usage: smsforall (-l login -p password|--test) COMMAND [options] ..."

  opts.separator  ""
  opts.separator  "Commands"
  opts.separator  "     balance                   : get balance"
  opts.separator  "     send SENDER NUMBER TEXT   : send SMS with TEXT to NUMBER"
  opts.separator  "     status TRANSACTION        : get status of transaction"
  opts.separator  ""
  opts.separator  "Options"
 
  # Define the options, and what they do
  options[:login] = nil
  opts.on( '-l', '--login LOGIN', 'Login' ) do|login|
    options[:login] = login
  end
 
  options[:password] = nil
  opts.on( '-p', '--password PASSWORD', 'Password' ) do|password|
    options[:password] = password
  end
 
  options[:test] = :production
  opts.on( '-t', '--test', 'Enable test mode' ) do
    options[:test] = :test
  end
 
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end
 
optparse.parse!

if options[:test] == :test
  puts "[WARNING]: test mode enabled!"
  options[:login] = "test"
  options[:password] = "test"
end

if not (options[:login] && options[:password])
  puts "[ERROR]: you must provide login and password!"
  exit
end

if not %w[balance send status].include?(ARGV[0])
  puts "[ERROR]: command not defined!"
  exit
end

# actions
def get_balance(login, password, test)
  sms = Smsforall::Sms.new(login,password, test)
  puts "[INFO]: getting balance for #{login}"
  balance = sms.get_balance()
  puts "#{balance}"
end

def send_sms(login, password, test, sender, number, text)
  if not (sender && number && text)
    puts "[ERROR]: wrong number of parameters!"
    exit
  end
  puts "[INFO]: sending SMS to #{number}"
  sms = Smsforall::Sms.new(login,password, test)
  transaction = sms.send_message(sender, text, number)
  puts "#{transaction}"
end

def get_status(login, password, test, transaction)
  puts "[INFO]: getting status"
  sms = Smsforall::Sms.new(login,password, test)
  status = sms.get_status(transaction)["status"]
  puts "#{status}"
end

# route command
action = case ARGV[0]
           when "balance" then get_balance(options[:login], options[:password], options[:test])
           when "send" then send_sms(options[:login], options[:password], options[:test], ARGV[1], ARGV[2], ARGV[3])
           when "status" then get_status(options[:login], options[:password], options[:test], ARGV[1])
end
